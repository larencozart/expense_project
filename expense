#!/usr/bin/env node

const { Client } = require("pg");
const PROCESS = require('process');
const client = new Client({ database: "expenses"});

const listExpenses = async function() {
  await client.connect();
  
  let data = await client.query("SELECT * FROM expenses");

  data.rows.forEach(row => {

    const row_info = [
      `${row.id}`.padStart(3),
      row.created_on.toDateString().padStart(10),
      row.amount.padStart(12),
      row.memo
    ];

    console.log(row_info.join(' | '));
  });
  
  client.end();
};

const displayHelp = () => {
  console.log(`An expense recording system

  Commands:
  
  add AMOUNT MEMO [DATE] - record a new expense
  clear - delete all expenses
  list - list all expenses
  delete NUMBER - remove expense with id NUMBER
  search QUERY - list expenses with a matching memo field"`
  );
}

const addExpense = async function (amount, memo) {
  await client.connect();
  // let date = new Date();
  // date = date.toLocaleDateString();

  const query_config = {
    text: `INSERT INTO expenses (amount, memo, created_on)
    VALUES ($1, $2, NOW())`,
    values: [amount, memo]
  }

  await client.query(query_config);

  await client.end();
}

const logAndExit = (error) => {
  console.log(error);
  PROCESS.exit();
}

let args = PROCESS.argv;
let command = args[2];

async function runExpenseApplication() {
  try {
    if (command == 'list') {
      listExpenses();
    } else if (command == 'add') {
      let amount = args[3];
      let memo = args[4];
      if (amount && memo) {
        await addExpense(amount, memo);
      } else {
        console.log('You must provide an amount and memo.')
      }
    } else {
      displayHelp();
    }
  } catch (error) {
    console.log('running logAndExit');
    logAndExit(error);
  }
  
}

runExpenseApplication();